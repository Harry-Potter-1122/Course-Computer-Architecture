<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="mymachine.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="REGISTER" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field691c293d">
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field2fcc7dcf">
	</Field>
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field4890b0ed">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register5c540386" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register25665f62" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register299ad091" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register138882ed" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register6fbceb29" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register783624f3" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register7577d3c" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register501f18d1" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-BIT" bit="0" register="model.module.Register138882ed" halt="false" id="model.module.ConditionBit58f25458" />
	<ConditionBit name="HALT-BIT" bit="0" register="model.module.Register501f18d1" halt="true" id="model.module.ConditionBit11aaf209" />

	<!--............. rams ..........................-->
	<RAM name="MAIN" length="4096" cellSize="16" id="model.module.RAM5599f79" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register5c540386" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet182f7f96" />

	<!--............. test ..........................-->
	<Test name="AC!=0" register="model.module.Register5c540386" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test26e69a0b" />
	<Test name="AC!=1" register="model.module.Register5c540386" start="0" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test12d1b3cc" />
	<Test name="DR!=0" register="model.module.Register299ad091" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test1a429bca" />

	<!--............. increment .....................-->
	<Increment name="INCR-AC" register="model.module.Register5c540386" delta="1" id="model.microinstruction.Increment79369e1f" />
	<Increment name="INCR-DR" register="model.module.Register299ad091" delta="1" id="model.microinstruction.Increment66e61d26" />
	<Increment name="INCR-PC" register="model.module.Register7577d3c" delta="1" id="model.microinstruction.Increment68f446fb" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC and DR" type="AND" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" id="model.microinstruction.Logical4178e45e" />
	<Logical name="AC&lt;-AC nand DR" type="NAND" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" id="model.microinstruction.Logical48ced0e4" />
	<Logical name="AC&lt;-AC nor DR" type="NOR" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" id="model.microinstruction.Logical5170b74f" />
	<Logical name="AC&lt;-AC or DR" type="OR" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" id="model.microinstruction.Logical57c59ea4" />
	<Logical name="AC&lt;-AC xor DR" type="XOR" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" id="model.microinstruction.Logical5199ca16" />
	<Logical name="AC&lt;-AC'" type="NOT" source1="model.module.Register5c540386" source2="model.module.Register5c540386" destination="model.module.Register5c540386" id="model.microinstruction.Logical6fee6931" />
	<Logical name="NOT E" type="NOT" source1="model.module.Register138882ed" source2="model.module.Register138882ed" destination="model.module.Register138882ed" id="model.microinstruction.Logical3b70714c" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC*DR" type="MULTIPLY" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" carryBit="model.module.ConditionBit58f25458" id="model.microinstruction.Arithmetic5f6d5343" />
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="model.module.Register5c540386" source2="model.module.Register299ad091" destination="model.module.Register5c540386" carryBit="model.module.ConditionBit58f25458" id="model.microinstruction.Arithmetic43561e7e" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AR&lt;-IR(4-15)" source="model.module.Register783624f3" srcStartBit="4" dest="model.module.Register25665f62" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR22e5d10b" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register7577d3c" srcStartBit="0" dest="model.module.Register25665f62" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR7e478ebb" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register25665f62" srcStartBit="0" dest="model.module.Register7577d3c" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR135a0920" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE-IR" ir="model.module.Register783624f3" id="model.microinstruction.Decode53604c42" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HALT" bit="model.module.ConditionBit11aaf209" value="1" id="model.microinstruction.SetCondBit507882c0" />

	<!--............. io ............................-->
	<IO name="INPUT" direction="input" type="integer" buffer="model.module.Register5c540386" connection="[Console]" id="model.microinstruction.IO6ff51bca" />
	<IO name="OUTPUT" direction="output" type="integer" buffer="model.module.Register5c540386" connection="[Console]" id="model.microinstruction.IO64bb947d" />

	<!--............. memory access .................-->
	<MemoryAccess name="AC&lt;-Main[AR]" direction="read" memory="model.module.RAM5599f79" data="model.module.Register5c540386" address="model.module.Register25665f62" id="model.microinstruction.MemoryAccess2093c9ee" />
	<MemoryAccess name="DR&lt;-Main[AR]" direction="read" memory="model.module.RAM5599f79" data="model.module.Register299ad091" address="model.module.Register25665f62" id="model.microinstruction.MemoryAccess67ffad7d" />
	<MemoryAccess name="IR&lt;-MAIN[AR]" direction="read" memory="model.module.RAM5599f79" data="model.module.Register783624f3" address="model.module.Register25665f62" id="model.microinstruction.MemoryAccess5fdfc583" />
	<MemoryAccess name="Main[AR]&lt;-AC" direction="write" memory="model.module.RAM5599f79" data="model.module.Register5c540386" address="model.module.Register25665f62" id="model.microinstruction.MemoryAccess6f06d11" />
	<MemoryAccess name="Main[AR]&lt;-DR" direction="write" memory="model.module.RAM5599f79" data="model.module.Register299ad091" address="model.module.Register25665f62" id="model.microinstruction.MemoryAccess38921898" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End229cceb2" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR7e478ebb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess5fdfc583" />
		<Microinstruction microRef="model.microinstruction.Increment68f446fb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR22e5d10b" />
		<Microinstruction microRef="model.microinstruction.Decode53604c42" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="JMP" opcode="9" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#d1a5e3 #a4c980" assemblyColors="#d1a5e3 #a4c980" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR22e5d10b" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR135a0920" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="e100" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#cfe89f" assemblyColors="#cfe89f" >
		<Microinstruction microRef="model.microinstruction.Logical3b70714c" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#81b292" assemblyColors="#81b292" >
		<Microinstruction microRef="model.microinstruction.CpusimSet182f7f96" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="e008" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#f1b7fc" assemblyColors="#f1b7fc" >
		<Microinstruction microRef="model.microinstruction.Test12d1b3cc" />
		<Microinstruction microRef="model.microinstruction.Increment68f446fb" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#d7d2a9" assemblyColors="#d7d2a9" >
		<Microinstruction microRef="model.microinstruction.Test26e69a0b" />
		<Microinstruction microRef="model.microinstruction.Increment68f446fb" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="c" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#8ecaa4 #cb8b8b" assemblyColors="#8ecaa4 #cb8b8b" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Increment66e61d26" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess38921898" />
		<Microinstruction microRef="model.microinstruction.Test1a429bca" />
		<Microinstruction microRef="model.microinstruction.Increment68f446fb" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="MUL" opcode="8" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f5dfe7 #9beff2" assemblyColors="#f5dfe7 #9beff2" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Arithmetic5f6d5343" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="NAND" opcode="7" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#fcaeb8 #b4f2c1" assemblyColors="#fcaeb8 #b4f2c1" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Logical48ced0e4" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="NOR" opcode="5" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#af88af #b5ec82" assemblyColors="#af88af #b5ec82" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Logical5170b74f" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="XOR" opcode="3" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#82bc84 #ddd78b" assemblyColors="#82bc84 #ddd78b" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Logical5199ca16" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="OR" opcode="1" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#938cc1 #b8d49c" assemblyColors="#938cc1 #b8d49c" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Logical57c59ea4" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#8af889 #d494f4" assemblyColors="#8af889 #d494f4" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Logical4178e45e" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="4" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#def2ce #b7e29c" assemblyColors="#def2ce #b7e29c" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess2093c9ee" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="e020" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#c58fd8" assemblyColors="#c58fd8" >
		<Microinstruction microRef="model.microinstruction.Increment79369e1f" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e200" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#bb96a4" assemblyColors="#bb96a4" >
		<Microinstruction microRef="model.microinstruction.Logical6fee6931" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="2" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#abb1d5 #d5fbab" assemblyColors="#abb1d5 #d5fbab" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess67ffad7d" />
		<Microinstruction microRef="model.microinstruction.Arithmetic43561e7e" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="6" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f3c4cc #b694cf" assemblyColors="#f3c4cc #b694cf" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6f06d11" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e001" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#bfedb2" assemblyColors="#bfedb2" >
		<Microinstruction microRef="model.microinstruction.SetCondBit507882c0" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#e0b9ae" assemblyColors="#e0b9ae" >
		<Microinstruction microRef="model.microinstruction.IO64bb947d" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#bda88e" assemblyColors="#bda88e" >
		<Microinstruction microRef="model.microinstruction.IO6ff51bca" />
		<Microinstruction microRef="model.microinstruction.End229cceb2" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM5599f79" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
